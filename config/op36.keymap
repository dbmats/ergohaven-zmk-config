#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        ruen {
            bindings = <&ru_en>;
            key-positions = <31 34>;
            layers = <0>;
        };

        enru {
            bindings = <&en_ru>;
            key-positions = <31 34>;
            layers = <4>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <12 13>;
            layers = <0 4>;
        };

        alt {
            bindings = <&kp LALT>;
            key-positions = <22 23>;
            layers = <0 4>;
        };

        ctr {
            bindings = <&kp LCTRL>;
            key-positions = <11 13>;
            layers = <0 4>;
        };

        bcs {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
            layers = <0 4>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <2 3>;
            layers = <0 4>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <3 1>;
            layers = <0 4>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <0 3>;
            layers = <0 4>;
        };

        f1 {
            bindings = <&kp F1>;
            key-positions = <18 19>;
            layers = <2 6>;
        };

        val_fmt {
            bindings = <&val_frm>;
            key-positions = <3 4>;
            layers = <0 4>;
        };

        win {
            bindings = <&kp LWIN>;
            key-positions = <28 19>;
            layers = <0 4>;
        };
    };

    macros {
        ru_en: ru_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RS(LALT) &to 4>;
            label = "RU_EN";
        };

        en_ru: en_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RS(LEFT_ALT) &to 0>;
            label = "EN_RU";
        };

        ru7: xx {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RS(LEFT_ALT) &kp RS(N7) &kp RS(LEFT_ALT)>;
            label = "XX";
        };

        ru3: ru3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RS(LEFT_ALT) &kp LS(N3) &kp RS(LEFT_ALT)>;
            label = "RU3";
        };

        en6: ru6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RS(LEFT_ALT) &kp RS(N6) &kp RS(LEFT_ALT)>;
            label = "RU6";
        };

        format: format {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LALT &kp Z &kp V &kp A &kp A &kp A &kp ENTER>;
            label = "FORMAT";
        };

        value: value {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LALT &kp Z &kp V &kp P &kp P &kp ENTER>;
            label = "VALUE";
        };

        formula: formula {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LALT &kp Z &kp V &kp A &kp A &kp ENTER>;
            label = "FORMULA";
        };

        dbl_clk: dbl_clk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &mkp LCLK>;
            label = "DBL_CLK";
        };

        comb: join {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LALT &kp Z &kp O &kp COMMA>;
            label = "JOIN";
        };

        dis_cmb: dis_cmb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LALT &kp Z &kp O &kp J>;
            label = "DIS_CMB";
        };

        grid: grid {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LALT &kp Z &kp U &kp U &kp C>;
            label = "GRID";
        };

        no_grid: no_grid {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LALT &kp Z &kp U &kp U &kp F>;
            label = "NO_GRID";
        };

        en_frmt: en_frmt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RS(LALT) &kp LC(J) &kp RS(LALT)>;
            label = "EN_FRMT";
        };

        ru_min: min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RS(LALT) &kp LS(LESS_THAN) &kp RS(LALT)>;
            label = "MIN";
        };

        ru_max: ru_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RS(LALT) &kp LS(GREATER_THAN) &kp RS(LALT)>;
            label = "RU_MIN";
        };

        ru_lftbrt: ru_lftbrt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RS(LALT) &kp LEFT_BRACKET &kp RS(LALT)>;
            label = "RU_LFTBRT";
        };

        ru_rtbrt: ru_rtbrt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RS(LALT) &kp RIGHT_BRACKET &kp RS(LALT)>;
            label = "RU_RTBRT";
        };

        ru_lftbbrt: ru_lftbbrt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RS(LALT) &kp LS(LEFT_BRACE) &kp RS(LALT)>;
            label = "RU_LFTBBRT";
        };

        ru_rtbbrt: ru_rtbbrt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RS(LALT) &kp LS(RIGHT_BRACE) &kp RS(LALT)>;
            label = "RU_RTBBRT";
        };
    };

    behaviors {
        ru_7: ru_7 {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_7";
            bindings = <&ru7>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
        };

        ru_3: ru_3 {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_3";
            bindings = <&ru3>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        en_6: en_6 {
            compatible = "zmk,behavior-hold-tap";
            label = "EN_6";
            bindings = <&en6>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        val_frm: val_frm {
            compatible = "zmk,behavior-tap-dance";
            label = "VAL_FRM";
            #binding-cells = <0>;
            bindings = <&value>, <&format>;

            tapping-term-ms = <300>;
        };

        combin: combin {
            compatible = "zmk,behavior-tap-dance";
            label = "COMBIN";
            #binding-cells = <0>;
            bindings = <&comb>, <&dis_cmb>;

            tapping-term-ms = <300>;
        };

        grid_no: grid_no {
            compatible = "zmk,behavior-tap-dance";
            label = "GRID_NO";
            #binding-cells = <0>;
            bindings = <&grid>, <&no_grid>;

            tapping-term-ms = <300>;
        };

        sell: sell {
            compatible = "zmk,behavior-tap-dance";
            label = "SELL";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LC(PLUS)>, <&kp LC(MINUS)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        ru_abc {
            bindings = <
  &kp Q  &kp W  &kp E  &kp R      &kp T                      &kp Y  &kp U      &kp I      &kp O    &kp P
  &kp A  &kp S  &kp D  &kp F      &kp G                      &kp H  &kp J      &kp K      &kp L    &kp SEMI
  &kp Z  &kp X  &kp C  &kp V      &kp B                      &kp N  &kp M      &kp COMMA  &kp DOT  &mt LS(FSLH) SLASH
                       &kp LSHFT  &mo 1  &kp SPACE    &mo 3  &mo 2  &kp RSHFT
            >;
        };

        ru_mouse {
            bindings = <
  &kp LSHFT  &kp DELETE  &kp ENTER        &kp TAB    &none                            &kp HOME              &kp PAGE_UP  &kp UP_ARROW  &kp PAGE_DOWN  &kp LBKT
  &kp LCTRL  &none       &kp PAUSE_BREAK  &mkp LCLK  &dbl_clk                         &kp END               &kp LEFT     &kp DOWN      &kp RIGHT      &kp RBKT
  &kp RGUI   &none       &kp F10          &mkp RCLK  &none                            &kp RIGHT_WIN         &none        &none         &none          &kp APOS
                                          &none      &none     &none    &kp LEFT_ALT  &kp LS(LEFT_CONTROL)  &kp INSERT
            >;
        };

        ru_num {
            bindings = <
  &kp N0          &mt LS(N9) N9             &mt LS(N9) N8  &ru_7 A N7     &mt RS(N6) N6                     &kp F6       &kp F7              &kp F8              &kp F9      &kp F11
  &mt RS(N1) N1   &mt RS(N2) N2             &ru_3 0 N3     &mt RS(N4) N4  &mt RS(N5) N5                     &kp F5       &kp F4              &kp F3              &kp F2      &kp F12
  &mt PLUS EQUAL  &mt LS(UNDERSCORE) MINUS  &kp STAR       &kp RS(PIPE)   &kp LS(FSLH)                      &kp LA(F12)  &kp LA(LS(INSERT))  &kp LC(LS(INSERT))  &kp LS(F6)  &kp LS(F5)
                                                           &none          &kp LCTRL      &kp LALT    &none  &none        &kp RIGHT_CONTROL
            >;
        };

        ru_sym {
            bindings = <
  &formula    &ru_lftbbrt  &ru_rtbbrt  &kp LA(EQUAL)  &kp LC(J)                  &soft_off          &none            &none  &none  &bt BT_CLR
  &kp RS(N7)  &ru_lftbrt   &ru_rtbrt   &sell          &grid_no                   &none              &none            &none  &none  &bt BT_SEL 1
  &none       &ru_min      &ru_max     &kp BACKSLASH  &combin                    &kp TILDE          &none            &none  &none  &bt BT_SEL 0
                                       &none          &none      &none    &none  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
            >;
        };

        en_abc {
            bindings = <
  &kp Q  &kp W  &kp E  &kp R      &kp T                      &kp Y  &kp U      &kp I  &kp O  &kp P
  &kp A  &kp S  &kp D  &kp F      &kp G                      &kp H  &kp J      &kp K  &kp L  &kp SEMI
  &kp Z  &kp X  &kp C  &kp V      &kp B                      &kp N  &kp M      &none  &none  &mt COMMA DOT
                       &kp LSHFT  &mo 5  &kp SPACE    &mo 7  &mo 6  &kp RSHFT
            >;
        };

        en_mouse {
            bindings = <
  &kp LSHFT  &kp DELETE  &kp ENTER        &kp TAB    &none                            &kp HOME              &kp PAGE_UP  &kp UP_ARROW  &kp PAGE_DOWN  &kp LBKT
  &kp LCTRL  &none       &kp PAUSE_BREAK  &mkp LCLK  &dbl_clk                         &kp END               &kp LEFT     &kp DOWN      &kp RIGHT      &kp RBKT
  &kp RGUI   &none       &kp F10          &mkp RCLK  &none                            &kp RIGHT_WIN         &none        &none         &none          &kp APOS
                                          &none      &none     &none    &kp LEFT_ALT  &kp LS(LEFT_CONTROL)  &kp INSERT
            >;
        };

        en_num {
            bindings = <
  &kp N0          &mt RS(N9) N9             &mt RS(N9) N8  &mt RS(N7) N7             &en_6 0 N6                        &kp F6       &kp F7              &kp F8              &kp F9      &kp F11
  &mt RS(N1) N1   &mt RS(DOUBLE_QUOTES) N2  &mt HASH N3    &mt SEMICOLON N4          &mt RS(N5) N5                     &kp F5       &kp F4              &kp F3              &kp F2      &kp F12
  &mt PLUS EQUAL  &mt UNDERSCORE MINUS      &kp STAR       &kp RS(NON_US_BACKSLASH)  &kp COMMA                         &kp LA(F12)  &kp LA(LS(INSERT))  &kp LC(LS(INSERT))  &kp LS(F6)  &kp LS(F5)
                                                           &none                     &kp LCTRL      &kp LALT    &none  &none        &kp RIGHT_CONTROL
            >;
        };

        en_sym {
            bindings = <
  &formula          &kp LS(LEFT_BRACE)  &kp LS(RIGHT_BRACE)   &kp LA(EQUAL)  &en_frmt                  &soft_off          &none            &none  &none  &bt BT_CLR
  &kp LS(QUESTION)  &kp LEFT_BRACKET    &kp RIGHT_BRACKET     &sell          &grid_no                  &none              &none            &none  &none  &bt BT_SEL 1
  &none             &kp LS(LESS_THAN)   &kp LS(GREATER_THAN)  &kp BACKSLASH  &combin                   &kp A              &none            &none  &none  &bt BT_SEL 0
                                                              &none          &none     &none    &none  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
            >;
        };
    };
};
